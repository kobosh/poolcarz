{"ast":null,"code":"import _classCallCheck from \"D:\\\\poolcarz-angular-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\poolcarz-angular-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/map'; //import 'rxjs/add/operator/do';\n\nimport 'rxjs/catch';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var RestService = /*#__PURE__*/function () {\n  function RestService(http) {\n    _classCallCheck(this, RestService);\n\n    this.http = http;\n  }\n\n  _createClass(RestService, [{\n    key: \"getAllRides\",\n    value: function getAllRides() {\n      return this.http.get('http://localhost:3000/rides'); //.map((response: Response) => response.json())\n      //.catch(this.handleError);\n    }\n  }, {\n    key: \"getAllUsers\",\n    value: function getAllUsers() {\n      return this.http.get('http://localhost:3000/users'); //.map((response: Response) => response.json())\n      //.catch(this.handleError);\n    }\n  }, {\n    key: \"handleError\",\n    value: function handleError(error) {\n      var errMsg = error.message ? error.message : error.status ? \"\".concat(error.status, \" - \").concat(error.statusText) : 'Server error';\n      throw Error(errMsg);\n    }\n  }]);\n\n  return RestService;\n}();\n\nRestService.ɵfac = function RestService_Factory(t) {\n  return new (t || RestService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nRestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestService,\n  factory: RestService.ɵfac\n});","map":{"version":3,"sources":["D:/poolcarz-angular-app/src/app/services/rest.service.ts"],"names":["HttpClient","Observable","i0","i1","RestService","http","get","error","errMsg","message","status","statusText","Error","ɵfac","RestService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,sBAA3B;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAO,UAAP,C,CACA;;AACA,OAAO,YAAP;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,WAAaC,WAAb;AACI,uBAAYC,IAAZ,EAAkB;AAAA;;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AAHL;AAAA;AAAA,WAII,uBAAc;AACV,aAAO,KAAKA,IAAL,CAAUC,GAAV,CAAc,6BAAd,CAAP,CADU,CAEV;AACA;AACH;AARL;AAAA;AAAA,WASI,uBAAc;AACV,aAAO,KAAKD,IAAL,CAAUC,GAAV,CAAc,6BAAd,CAAP,CADU,CAEV;AACA;AACH;AAbL;AAAA;AAAA,WAcI,qBAAYC,KAAZ,EAAmB;AACf,UAAMC,MAAM,GAAID,KAAK,CAACE,OAAP,GAAkBF,KAAK,CAACE,OAAxB,GACXF,KAAK,CAACG,MAAN,aAAkBH,KAAK,CAACG,MAAxB,gBAAoCH,KAAK,CAACI,UAA1C,IAAyD,cAD7D;AAEA,YAAMC,KAAK,CAACJ,MAAD,CAAX;AACH;AAlBL;;AAAA;AAAA;;AAoBAJ,WAAW,CAACS,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIX,WAAV,EAAuBF,EAAE,CAACc,QAAH,CAAYb,EAAE,CAACH,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAI,WAAW,CAACa,KAAZ,GAAoB,aAAcf,EAAE,CAACgB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEf,WAAT;AAAsBgB,EAAAA,OAAO,EAAEhB,WAAW,CAACS;AAA3C,CAAtB,CAAlC","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport 'rxjs/map';\r\n//import 'rxjs/add/operator/do';\r\nimport 'rxjs/catch';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class RestService {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    getAllRides() {\r\n        return this.http.get('http://localhost:3000/rides');\r\n        //.map((response: Response) => response.json())\r\n        //.catch(this.handleError);\r\n    }\r\n    getAllUsers() {\r\n        return this.http.get('http://localhost:3000/users');\r\n        //.map((response: Response) => response.json())\r\n        //.catch(this.handleError);\r\n    }\r\n    handleError(error) {\r\n        const errMsg = (error.message) ? error.message :\r\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n        throw Error(errMsg);\r\n    }\r\n}\r\nRestService.ɵfac = function RestService_Factory(t) { return new (t || RestService)(i0.ɵɵinject(i1.HttpClient)); };\r\nRestService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RestService, factory: RestService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}